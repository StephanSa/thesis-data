Based on the code you've shared, there are a few potential security concerns and best practices that should be addressed:

Session fixation vulnerability: The code doesn't regenerate the session ID after login or authentication. This could potentially allow an attacker to exploit session fixation.
Lack of session timeout: There's no implementation of session timeout. Long-lived sessions can be a security risk if they're compromised.
Insecure session data storage: Sensitive information is being stored in the session (user name in this case). While not highly sensitive, it's a good practice to minimize data stored in sessions.
No CSRF protection: The code doesn't implement Cross-Site Request Forgery (CSRF) tokens, which are important for protecting against CSRF attacks.
Potential for session hijacking: If the application doesn't use HTTPS, the session could be vulnerable to hijacking.
Lack of input validation: The SetSession method accepts a name parameter without any validation or sanitization, which could potentially lead to injection attacks if used improperly.
No secure flag on cookies: The code doesn't explicitly set the secure flag on session cookies, which is important for ensuring they're only transmitted over HTTPS.
No HTTP-only flag on cookies: Similarly, the HTTP-only flag isn't set, which helps prevent client-side script access to cookies.
Predictable session keys: The session keys ("_Name" and "_Time") are hardcoded and predictable, which isn't a best practice.
Potential information disclosure: The code returns the exact time the session was created, which might provide unnecessary information to potential attackers.

To improve the security of this code, you should consider implementing these missing security features and following secure coding practices. Remember to always use HTTPS, implement proper authentication and authorization, and follow the principle of least privilege.